$date
  Sun Jan 26 12:01:59 2025
$end
$version
  GHDL v0
$end
$timescale
  1 fs
$end
$scope module standard $end
$upscope $end
$scope module std_logic_1164 $end
$upscope $end
$scope module numeric_std $end
$upscope $end
$scope module alu_opcode $end
$upscope $end
$scope module extest $end
$var reg 32 ! imm_in[31:0] $end
$var reg 32 " pc_in[31:0] $end
$var reg 32 # alu_val_in[31:0] $end
$var reg 32 $ reg_val_in[31:0] $end
$var reg 5 % opcode_in[4:0] $end
$var reg 5 & rt_in[4:0] $end
$var reg 5 ' rd_in[4:0] $end
$var reg 1 ( clk_in $end
$var reg 1 ) mux_sel_in $end
$var reg 1 * write_sel_in $end
$var reg 1 + we_in $end
$var reg 1 , re_in $end
$var reg 1 - mem_to_reg_ex_in $end
$var reg 1 . reg_write_ex_in $end
$var reg 32 / pc_offs_out[31:0] $end
$var reg 32 0 out_result_out[31:0] $end
$var reg 32 1 data_out[31:0] $end
$var reg 5 2 write_reg_out[4:0] $end
$var reg 1 3 we_out_out $end
$var reg 1 4 re_out_out $end
$var reg 1 5 mem_to_reg_mem_out $end
$var reg 1 6 reg_write_mem_out $end
$scope module exi $end
$var reg 32 7 imm[31:0] $end
$var reg 32 8 pc[31:0] $end
$var reg 32 9 alu_val[31:0] $end
$var reg 32 : reg_val[31:0] $end
$var reg 5 ; opcode[4:0] $end
$var reg 5 < rt[4:0] $end
$var reg 5 = rd[4:0] $end
$var reg 1 > clk $end
$var reg 1 ? mux_sel $end
$var reg 1 @ write_sel $end
$var reg 1 A we $end
$var reg 1 B re $end
$var reg 1 C mem_to_reg_ex $end
$var reg 1 D reg_write_ex $end
$var reg 32 E pc_offs[31:0] $end
$var reg 32 F out_result[31:0] $end
$var reg 32 G data[31:0] $end
$var reg 5 H write_reg[4:0] $end
$var reg 1 I we_out $end
$var reg 1 J re_out $end
$var reg 1 K mem_to_reg_mem $end
$var reg 1 L reg_write_mem $end
$var reg 32 M alu_result[31:0] $end
$var reg 32 N mux_var[31:0] $end
$scope module alui $end
$var reg 32 O opa[31:0] $end
$var reg 32 P opb[31:0] $end
$var reg 32 Q result[31:0] $end
$var reg 5 R op[4:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
b00000000000000000000000000000001 !
b00000000000000000000000000000001 "
b00000000000000000000000000000001 #
b00000000000000000000000000000001 $
b00001 %
b00001 &
b00001 '
0(
1)
1*
1+
1,
1-
1.
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU /
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU 0
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU 1
bUUUUU 2
U3
U4
U5
U6
b00000000000000000000000000000001 7
b00000000000000000000000000000001 8
b00000000000000000000000000000001 9
b00000000000000000000000000000001 :
b00001 ;
b00001 <
b00001 =
0>
1?
1@
1A
1B
1C
1D
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU E
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU F
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU G
bUUUUU H
UI
UJ
UK
UL
b00000000000000000000000000000010 M
b00000000000000000000000000000001 N
b00000000000000000000000000000001 O
b00000000000000000000000000000001 P
b00000000000000000000000000000010 Q
b00001 R
#10000000
1(
b00000000000000000000000000000101 /
b00000000000000000000000000000010 0
b00000000000000000000000000000001 1
b00001 2
13
14
15
16
1>
b00000000000000000000000000000101 E
b00000000000000000000000000000010 F
b00000000000000000000000000000001 G
b00001 H
1I
1J
1K
1L
#20000000
