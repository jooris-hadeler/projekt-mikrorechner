[
    {
        "opcode": 0,
        "funct": 0,
        "format": "R",
        "mnemonic": "add $d, $s, $t",
        "meaning": "$d = $s + $t"
    },
    {
        "opcode": 0,
        "funct": 1,
        "format": "R",
        "mnemonic": "sub $d, $s, $t",
        "meaning": "$d = $s - $t"
    },
    {
        "opcode": 0,
        "funct": 2,
        "format": "R",
        "mnemonic": "and $d, $s, $t",
        "meaning": "$d = $s & $t"
    },
    {
        "opcode": 0,
        "funct": 3,
        "format": "R",
        "mnemonic": "or $d, $s, $t",
        "meaning": "$d = $s | $t"
    },
    {
        "opcode": 0,
        "funct": 4,
        "format": "R",
        "mnemonic": "xor $d, $s, $t",
        "meaning": "$d = $s ^ $t"
    },
    {
        "opcode": 0,
        "funct": 5,
        "format": "R",
        "mnemonic": "shl $d, $s, $t",
        "meaning": "$d = $s << $t"
    },
    {
        "opcode": 0,
        "funct": 6,
        "format": "R",
        "mnemonic": "sal $d, $s, $t",
        "meaning": "$d = $s <<< $t"
    },
    {
        "opcode": 0,
        "funct": 7,
        "format": "R",
        "mnemonic": "shr $d, $s, $t",
        "meaning": "$d = $s >> $t"
    },
    {
        "opcode": 0,
        "funct": 8,
        "format": "R",
        "mnemonic": "sar $d, $s, $t",
        "meaning": "$d = $s >>> $t"
    },
    {
        "opcode": 0,
        "funct": 9,
        "format": "R",
        "mnemonic": "not $d, $s",
        "meaning": "$d = ~$s"
    },
    {
        "opcode": 0,
        "funct": 10,
        "format": "R",
        "mnemonic": "lts $d, $s, $t",
        "meaning": "$d = ($s < $t)"
    },
    {
        "opcode": 0,
        "funct": 11,
        "format": "R",
        "mnemonic": "gts $d, $s, $t",
        "meaning": "$d = ($s > $t)"
    },
    {
        "opcode": 0,
        "funct": 12,
        "format": "R",
        "mnemonic": "ltu $d, $s, $t",
        "meaning": "$d = ($s < $t)"
    },
    {
        "opcode": 0,
        "funct": 13,
        "format": "R",
        "mnemonic": "gtu $d, $s, $t",
        "meaning": "$d = ($s > $t)"
    },
    {
        "opcode": 0,
        "funct": 14,
        "format": "R",
        "mnemonic": "eq $d, $s, $t",
        "meaning": "$d = $s == $t"
    },
    {
        "opcode": 0,
        "funct": 15,
        "format": "R",
        "mnemonic": "ne $d, $s, $t",
        "meaning": "$d = $s != $t"
    },
    {
        "opcode": 1,
        "format": "J",
        "mnemonic": "lhi $d, i",
        "meaning": "HH($d) = i"
    },
    {
        "opcode": 2,
        "format": "J",
        "mnemonic": "llo $d, i",
        "meaning": "LH($d) = i"
    },
    {
        "opcode": 3,
        "format": "I",
        "mnemonic": "lb $d, i($s)",
        "meaning": "$d = SE(MEM[$s + i]:1)"
    },
    {
        "opcode": 4,
        "format": "I",
        "mnemonic": "lbu $d, i($s)",
        "meaning": "$d = ZE(MEM[$s + i]:1)"
    },
    {
        "opcode": 5,
        "format": "I",
        "mnemonic": "lh $d, i($s)",
        "meaning": "$d = SE(MEM[$s + i]:2)"
    },
    {
        "opcode": 6,
        "format": "I",
        "mnemonic": "lhu $d, i($s)",
        "meaning": "$d = ZE(MEM[$s + i]:2)"
    },
    {
        "opcode": 7,
        "format": "I",
        "mnemonic": "lw $d, i($s)",
        "meaning": "$d = SE(MEM[$s + i]:4)"
    },
    {
        "opcode": 8,
        "format": "I",
        "mnemonic": "lwu $d, i($s)",
        "meaning": "$d = ZE(MEM[$s + i]:4)"
    },
    {
        "opcode": 9,
        "format": "I",
        "mnemonic": "sb i($d), $s",
        "meaning": "MEM[$d + i]:1 = LB($s)"
    },
    {
        "opcode": 10,
        "format": "I",
        "mnemonic": "sh i($d), $s",
        "meaning": "MEM[$d + i]:2 = LH($s)"
    },
    {
        "opcode": 11,
        "format": "I",
        "mnemonic": "sw i($d), $s",
        "meaning": "MEM[$d + i]:4 = $s"
    },
    {
        "opcode": 12,
        "format": "J",
        "mnemonic": "br $d, addr",
        "meaning": "if ($d != 0) pc += addr << 2"
    },
    {
        "opcode": 13,
        "format": "J",
        "mnemonic": "jr $d",
        "meaning": "pc = $d"
    },
    {
        "opcode": 14,
        "format": "J",
        "mnemonic": "jmp addr",
        "meaning": "pc += addr << 2"
    },
    {
        "opcode": 15,
        "format": "I",
        "mnemonic": "push $d",
        "meaning": "MEM[sp] = $d; sp = sp - 4"
    },
    {
        "opcode": 16,
        "format": "I",
        "mnemonic": "pop $d",
        "meaning": "$d = MEM[sp]; sp = sp + 4"
    },
    {
        "opcode": 17,
        "format": "J",
        "mnemonic": "call off($r)",
        "meaning": "MEM[sp] = pc + 4; sp = sp - 4; pc = $r + off"
    },
    {
        "opcode": 18,
        "format": "?",
        "mnemonic": "ret",
        "meaning": "pc = MEM[sp]; sp = sp + 4"
    },
    {
        "opcode": 19,
        "format": "?",
        "mnemonic": "trap",
        "meaning": "Trap the emulator for debugging."
    },
    {
        "opcode": 20,
        "format": "?",
        "mnemonic": "halt",
        "meaning": "Halt the CPU."
    },
    {
        "opcode": 21,
        "format": "?",
        "mnemonic": "nop",
        "meaning": "Do nothing."
    }
]